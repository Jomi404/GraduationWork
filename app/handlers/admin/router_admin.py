from aiogram.types import Message, CallbackQuery, Update
from aiogram.filters import Command
from aiogram.fsm.state import State, StatesGroup
from aiogram_dialog import Dialog, DialogManager, Window, StartMode
from aiogram_dialog.widgets.text import Const
from aiogram_dialog.widgets.kbd import Button, Url, WebApp
from aiogram_dialog.api.exceptions import UnknownIntent
from app.handlers import BaseHandler
from app.handlers.admin.utils import AdminFilter
from app.handlers.user.router_user import MainDialogStates
from app.utils.logging import get_logger

logger = get_logger(__name__)


class AdminDialogStates(StatesGroup):
    main = State()
    admin_menu = State()


def get_user_from_update(event: Update):
    if isinstance(event, Update):
        if event.callback_query:
            return event.callback_query.from_user
        elif event.message:
            return event.message.from_user
    elif isinstance(event, CallbackQuery):
        return event.from_user
    elif isinstance(event, Message):
        return event.from_user
    return None


async def on_admin_panel_click(callback: CallbackQuery, button: Button, dialog_manager: DialogManager) -> None:
    logger_my = dialog_manager.middleware_data.get("logger") or logger
    user_id = dialog_manager.event.from_user.id
    logger_my.info(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {user_id} –Ω–∞–∂–∞–ª '–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞'")
    await dialog_manager.switch_to(AdminDialogStates.admin_menu)


async def on_back_click(callback: CallbackQuery, button: Button, dialog_manager: DialogManager) -> None:
    logger_my = dialog_manager.middleware_data.get("logger") or logger
    user_id = callback.from_user.id
    logger_my.info(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {user_id} –≤–µ—Ä–Ω—É–ª—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    await dialog_manager.switch_to(AdminDialogStates.main)


async def on_exit_click(callback: CallbackQuery, button: Button, dialog_manager: DialogManager) -> None:
    logger_my = dialog_manager.middleware_data.get("logger") or logger
    user_id = callback.from_user.id
    logger_my.info(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {user_id} –≤—ã—à–µ–ª –∏–∑ –∞–¥–º–∏–Ω-–º–µ–Ω—é")
    await callback.message.answer("–ê–¥–º–∏–Ω-–º–µ–Ω—é –∑–∞–∫—Ä—ã—Ç–æ. –¢–µ–ø–µ—Ä—å –≤–∞–º –¥–æ—Å—Ç—É–ø–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start –∏ –¥—Ä—É–≥–∏–µ.")
    await dialog_manager.done()


def admin_dialog() -> Dialog:
    return Dialog(
        Window(
            Const("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å! üëë –ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?"),
            Button(
                text=Const("–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"),
                id="admin_panel",
                on_click=on_admin_panel_click
            ),
            state=AdminDialogStates.main,
        ),
        Window(

            Const("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏:"),
            WebApp(text=Const("–ü–µ—Ä–µ–π—Ç–∏ –≤ –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:"), url=Const('https://lynxwheelsspec.ru/')),
            Button(
                text=Const("–ù–∞–∑–∞–¥"),
                id="back",
                on_click=on_back_click
            ),
            Button(
                text=Const("–í—ã—Ö–æ–¥"),
                id="exit",
                on_click=on_exit_click
            ),
            state=AdminDialogStates.admin_menu,
        )
    )


class AdminHandler(BaseHandler):
    def __init__(self, dp):
        self.dialog = admin_dialog()
        super().__init__(dp)
        self.dp.include_router(self.dialog)  # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –¥–∏–∞–ª–æ–≥ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏

    def register_handlers(self):
        self.dp.message(Command(commands=["admin", "–∞–¥–º–∏–Ω", "–ê–¥–º–∏–Ω", "Admin"]), AdminFilter())(self.admin_command)
        self.dp.message(Command(commands=["admin", "–∞–¥–º–∏–Ω", "–ê–¥–º–∏–Ω", "Admin"]), ~AdminFilter())(
            self.on_non_admin_access)

    async def set_logger_middleware(self, handler, event, data: dict):
        self.logger.info("–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –æ–±–Ω–æ–≤–ª—ë–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è set_logger_middleware v2.3")
        try:
            data["logger"] = self.logger
            return await handler(event, data)
        except UnknownIntent as e:
            error_message = str(e)
            intent_id = error_message.split("intent id: ")[-1] if "intent id: " in error_message else "unknown"
            user = get_user_from_update(event)
            user_id = user.id if user else "unknown"
            self.logger.debug(f"–¢–∏–ø —Å–æ–±—ã—Ç–∏—è: {type(event)}, —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ: {event}")
            self.logger.warning(
                f"–£—Å—Ç–∞—Ä–µ–≤—à–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è intent_id={intent_id}, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å={user_id}. –°–±—Ä–∞—Å—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥.")

            message = None
            if isinstance(event, Update) and event.callback_query:
                self.logger.debug(f"–°–æ–±—ã—Ç–∏–µ —è–≤–ª—è–µ—Ç—Å—è Update —Å CallbackQuery, –∏–∑–≤–ª–µ–∫–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ")
                message = event.callback_query.message
            elif isinstance(event, CallbackQuery):
                self.logger.debug(f"–°–æ–±—ã—Ç–∏–µ —è–≤–ª—è–µ—Ç—Å—è CallbackQuery, –∏–∑–≤–ª–µ–∫–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ")
                message = event.message
            else:
                self.logger.debug(f"–°–æ–±—ã—Ç–∏–µ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è CallbackQuery, —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ")

            dialog_manager = data.get("dialog_manager")
            self.logger.debug(f"dialog_manager: {dialog_manager}")

            if message:
                self.logger.debug(f"–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–æ: message_id={message.message_id}, chat_id={message.chat.id}")
                try:
                    await message.delete()
                    self.logger.debug(
                        f"–£–¥–∞–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è intent_id={intent_id}, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å={user_id}, message_id={message.message_id}")
                except Exception as delete_error:
                    self.logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {str(delete_error)}")

            if dialog_manager:
                try:
                    await dialog_manager.reset_stack()
                    dialog_manager.dialog_data.clear()
                    if dialog_manager.current_context() and dialog_manager.current_context().state in [
                        AdminDialogStates.main,
                        AdminDialogStates.admin_menu
                    ]:
                        await dialog_manager.start(state=AdminDialogStates.main, mode=StartMode.RESET_STACK)
                        if message:
                            await message.answer("–î–∏–∞–ª–æ–≥ —É—Å—Ç–∞—Ä–µ–ª. –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å! üöÄ")
                    else:
                        await dialog_manager.start(state=MainDialogStates.action_menu, mode=StartMode.RESET_STACK)
                        if message:
                            await message.answer("–î–∏–∞–ª–æ–≥ —É—Å—Ç–∞—Ä–µ–ª. –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–Ω–æ–≤–æ! üöÄ")
                    if isinstance(event, Update) and event.callback_query:
                        await event.callback_query.answer()
                    elif isinstance(event, CallbackQuery):
                        await event.answer()
                except Exception as reset_error:
                    self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –¥–∏–∞–ª–æ–≥–∞: {str(reset_error)}", exc_info=True)
                    if message:
                        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å –∫–æ–º–∞–Ω–¥—ã /start.")
                    if isinstance(event, Update) and event.callback_query:
                        await event.callback_query.answer()
                    elif isinstance(event, CallbackQuery):
                        await event.answer()
            else:
                self.logger.warning("dialog_manager –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, —Å–±—Ä–æ—Å –¥–∏–∞–ª–æ–≥–∞ –Ω–µ–≤–æ–∑–º–æ–∂–µ–Ω")
                if message:
                    await message.answer("–î–∏–∞–ª–æ–≥ —É—Å—Ç–∞—Ä–µ–ª. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å –∫–æ–º–∞–Ω–¥—ã /start.")
                if isinstance(event, Update) and event.callback_query:
                    await event.callback_query.answer()
                elif isinstance(event, CallbackQuery):
                    await event.answer()

            return None
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –≤ middleware: {str(e)}", exc_info=True)
            raise

    async def admin_command(self, message: Message, dialog_manager: DialogManager) -> None:
        user = message.from_user
        self.logger.info(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {user.id} ({user.first_name}) –≤—ã–∑–≤–∞–ª –∫–æ–º–∞–Ω–¥—É /admin")
        dialog_manager.middleware_data["logger"] = self.logger
        await dialog_manager.start(state=AdminDialogStates.main)

    async def on_non_admin_access(self, message: Message) -> None:
        self.logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –ø–æ–ø—ã—Ç–∞–ª—Å—è –≤—ã–∑–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É /admin, –Ω–æ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è "
                         f"–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º")
        await message.reply("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω. –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.")
