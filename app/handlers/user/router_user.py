from aiogram import Router
from aiogram.enums import ContentType
from aiogram.filters import Command
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton, WebAppInfo, Update, \
    KeyboardButton, ReplyKeyboardMarkup
from aiogram_dialog import Dialog, DialogManager, Window, StartMode
from aiogram_dialog.widgets.input import MessageInput
from aiogram_dialog.widgets.kbd import Button, SwitchTo, Cancel, Back
from aiogram_dialog.widgets.media import StaticMedia
from aiogram_dialog.widgets.text import Const, Format
from aiogram_dialog.api.exceptions import NoContextError, UnknownIntent
from pydantic import ValidationError

from app.handlers.user.window import create_confirmation_window, create_rental_calendar_window, enter_phone_getter, \
    create_request_getter, enter_address_getter
from app.utils.logging import get_logger

from app.core.database import connection, async_session_maker
from app.handlers import BaseHandler
from app.handlers.schemas import TelegramIDModel, SpecialEquipmentCategoryBase, SpecialEquipmentIdFilter,  \
    RequestCreate, EquipmentRentalHistoryCreate
from app.handlers.user.dao import AgreePolicyDAO
from app.handlers.dao import SpecialEquipmentCategoryDAO, SpecialEquipmentDAO, RequestDAO, EquipmentRentalHistoryDAO
from app.handlers.user.schemas import AgreePolicyModel
from app.handlers.user.utils import AgreePolicyFilter, get_active_policy_url, async_get_category_buttons, \
    async_get_equipment_buttons, async_get_equipment_details, validate_phone_number, no_err_filter
from app.handlers.user.keyboards import paginated_categories, paginated_equipment

logger = get_logger(__name__)


class MainDialogStates(StatesGroup):
    action_menu = State()
    select_category = State()
    select_equipment = State()
    view_equipment_details = State()
    confirm_select_equipment = State()
    select_date = State()
    confirm_date = State()
    enter_phone = State()
    confirm_phone = State()
    enter_address = State()
    confirm_address = State()
    create_request = State()
    request_sent = State()


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –æ–±—ä–µ–∫—Ç–∞ Update
def get_user_from_update(event: Update):
    if isinstance(event, Update):
        if event.callback_query:
            return event.callback_query.from_user
        elif event.message:
            return event.message.from_user
    elif isinstance(event, CallbackQuery):
        return event.from_user
    elif isinstance(event, Message):
        return event.from_user
    return None


async def on_start_click(callback: CallbackQuery, button, dialog_manager: DialogManager) -> None:
    logger_my = dialog_manager.middleware_data.get("logger") or logger
    logger_my.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {dialog_manager.event.from_user.id} –Ω–∞–∂–∞–ª '–ù–∞—á–∞—Ç—å'")
    await dialog_manager.switch_to(MainDialogStates.action_menu)


async def on_rent_click(callback: CallbackQuery, button, dialog_manager: DialogManager) -> None:
    logger_my = dialog_manager.middleware_data.get("logger") or logger
    logger_my.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {dialog_manager.event.from_user.id} –Ω–∞–∂–∞–ª '–ê—Ä–µ–Ω–¥–∞'")
    logger_my.info(f"–ü–µ—Ä–µ—Ö–æ–¥ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ {MainDialogStates.select_category}")
    try:
        await dialog_manager.switch_to(MainDialogStates.select_category)
    except NoContextError as e:
        logger_my.error(f"–û—à–∏–±–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–∏–∞–ª–æ–≥–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –≤ select_category: {str(e)}")
        await callback.message.answer("–û—à–∏–±–∫–∞: –¥–∏–∞–ª–æ–≥ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ —Å /start.")
        await callback.answer()


@connection()
async def on_category_click(callback: CallbackQuery, widget, manager: DialogManager, item_id: str, session) -> None:
    logger_my = manager.middleware_data.get("logger") or logger
    category_id = int(item_id)
    manager.dialog_data["category_id"] = category_id
    logger_my.info(f'category_id —Å–æ—Ö—Ä–∞–Ω–∏–ª—Å—è = {manager.dialog_data["category_id"]}')
    category_name = await get_category_name(category_id, session)
    logger_my.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {manager.event.from_user.id} –≤—ã–±—Ä–∞–ª –∫–∞—Ç–µ–≥–æ—Ä–∏—é '{category_name}' (id={category_id})")
    await manager.start(
        state=MainDialogStates.select_equipment,
        data={"category_id": category_id, "category_name": category_name},
        mode=StartMode.NORMAL
    )
    await callback.answer()


async def get_category_name(category_id, session):
    if not session:
        logger.error("–°–µ—Å—Å–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
        return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è"
    category_dao = SpecialEquipmentCategoryDAO(session)
    category = await category_dao.find_one_or_none(SpecialEquipmentCategoryBase(id=category_id))
    return category.name if category else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è"


@connection()
async def on_equipment_click(callback: CallbackQuery, widget, manager: DialogManager, item_id: str, session) -> None:
    logger_my = manager.middleware_data.get("logger") or logger
    logger_my.debug(f"–û–±—Ä–∞–±–æ—Ç—á–∏–∫ on_equipment_click –≤—ã–∑–≤–∞–Ω –¥–ª—è item_id={item_id}, callback_data={callback.data}")
    equipment_id = int(item_id)
    equipment_dao = SpecialEquipmentDAO(session)
    equipment = await equipment_dao.find_one_or_none(SpecialEquipmentIdFilter(id=equipment_id))
    if not equipment:
        logger_my.error(f"–¢–µ—Ö–Ω–∏–∫–∞ —Å id={equipment_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        await callback.message.answer("–¢–µ—Ö–Ω–∏–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        await callback.answer()
        return
    category_id = equipment.category_id
    logger_my.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {manager.event.from_user.id} –≤—ã–±—Ä–∞–ª —Ç–µ—Ö–Ω–∏–∫—É '{equipment.name}' (id={equipment_id})")
    await manager.start(
        state=MainDialogStates.view_equipment_details,
        data={"equipment_id": equipment_id, 'category_id': category_id},
        mode=StartMode.NORMAL
    )
    await callback.answer()


async def on_back_to_menu_click(callback: CallbackQuery, button, dialog_manager: DialogManager) -> None:
    logger_my = dialog_manager.middleware_data.get("logger") or logger
    user_id = callback.from_user.id
    logger_my.debug(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–∞–∂–∞–ª '–ù–∞–∑–∞–¥' –≤ –æ–∫–Ω–µ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏, callback_data={callback.data}")
    try:
        current_state = dialog_manager.current_context().state if dialog_manager.current_context() else "None"
        logger_my.info(f"–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {current_state}, –ø–µ—Ä–µ—Ö–æ–¥ –≤ {MainDialogStates.action_menu}")
        await dialog_manager.switch_to(MainDialogStates.action_menu)
        logger_my.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É—Å–ø–µ—à–Ω–æ –≤–µ—Ä–Ω—É–ª—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    except Exception as e:
        logger_my.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é: {str(e)}", exc_info=True)
        await callback.message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
    await callback.answer()


async def on_cancel_rent_click(callback: CallbackQuery, button, dialog_manager: DialogManager) -> None:
    logger_my = dialog_manager.middleware_data.get("logger") or logger
    logger_my.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {dialog_manager.event.from_user.id} –Ω–∞–∂–∞–ª '–û—Ç–º–µ–Ω–∞ –ê—Ä–µ–Ω–¥—ã'")
    await callback.message.answer("–í—ã –≤—ã–±—Ä–∞–ª–∏ '–û—Ç–º–µ–Ω–∞ –ê—Ä–µ–Ω–¥—ã'. –£–∫–∞–∂–∏—Ç–µ –¥–µ—Ç–∞–ª–∏ –æ—Ç–º–µ–Ω—ã. üö´")


async def on_payment_click(callback: CallbackQuery, button, dialog_manager: DialogManager) -> None:
    logger_my = dialog_manager.middleware_data.get("logger") or logger
    logger_my.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {dialog_manager.event.from_user.id} –Ω–∞–∂–∞–ª '–°—á–µ—Ç–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É'")
    await callback.message.answer("–í—ã –≤—ã–±—Ä–∞–ª–∏ '–°—á–µ—Ç–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É'. –í–æ—Ç –≤–∞—à–∏ —Å—á–µ—Ç–∞... üí∏")


async def on_more_click(callback: CallbackQuery, button, dialog_manager: DialogManager) -> None:
    logger_my = dialog_manager.middleware_data.get("logger") or logger
    logger_my.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {dialog_manager.event.from_user.id} –Ω–∞–∂–∞–ª '–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ'")
    await callback.message.answer("–í—ã –≤—ã–±—Ä–∞–ª–∏ '–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ'. –£–∫–∞–∂–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è. üí∞")


async def on_exit_click(callback: CallbackQuery, button, dialog_manager: DialogManager) -> None:
    logger_my = dialog_manager.middleware_data.get("logger") or logger
    user_id = callback.from_user.id
    try:
        logger_my.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤—ã—à–µ–ª –∏–∑ –º–µ–Ω—é")
        await callback.message.delete()
        dialog_manager.dialog_data.clear()
        await dialog_manager.reset_stack()
    except Exception as e:
        logger_my.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ –º–µ–Ω—é –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {str(e)}", exc_info=True)
        await callback.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")


async def go_menu(callback: CallbackQuery, button: Button, manager: DialogManager):
    await manager.switch_to(MainDialogStates.action_menu)


async def on_share_contact_click(callback, button, manager: DialogManager):
    # –°–æ–∑–¥–∞—ë–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –∫–æ–Ω—Ç–∞–∫—Ç–∞
    contact_button = KeyboardButton(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä", request_contact=True)
    keyboard = ReplyKeyboardMarkup(
        keyboard=[[contact_button]],
        resize_keyboard=True,
        one_time_keyboard=True
    )
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    await callback.message.answer(
        "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.",
        reply_markup=keyboard
    )
    await callback.answer()


async def on_phone_number_input(message: Message, widget: MessageInput, dialog_manager: DialogManager):
    if message.contact:
        phone_number = message.contact.phone_number
        formatted_phone = validate_phone_number(phone_number)
        if formatted_phone:
            dialog_manager.dialog_data["phone_number"] = formatted_phone
            await dialog_manager.switch_to(MainDialogStates.confirm_phone)
        else:
            dialog_manager.dialog_data["error_message"] = "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞."
    else:
        phone = message.text
        formatted_phone = validate_phone_number(phone)
        if formatted_phone:
            dialog_manager.dialog_data["phone_number"] = formatted_phone
            await dialog_manager.switch_to(MainDialogStates.confirm_phone)
        else:
            dialog_manager.dialog_data["error_message"] = (
                "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ ‚ùå\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤ —Ñ–æ—Ä–º–∞—Ç–µ 89930057019 ‚úÖ\n"
                "–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä"
            )


async def on_address_input(message: Message, widget: MessageInput, dialog_manager: DialogManager):
    if message.text:
        dialog_manager.dialog_data["address"] = message.text
        await dialog_manager.switch_to(MainDialogStates.confirm_address)
    else:
        dialog_manager.dialog_data["error_message"] = "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∞–¥—Ä–µ—Å —Ç–µ–∫—Å—Ç–æ–º."


async def on_send_request_click(callback: CallbackQuery, button: Button, dialog_manager: DialogManager) -> None:
    logger_my = dialog_manager.middleware_data.get("logger") or logger
    user = callback.from_user
    data = dialog_manager.dialog_data

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –¥–∏–∞–ª–æ–≥–∞
    equipment_name = data.get("equipment_name")
    selected_date = data.get("selected_date")
    phone_number = data.get("phone_number")
    address = data.get("address")
    first_name = user.first_name
    username = user.username

    if not username:
        username = None

    async with async_session_maker() as session:
        try:
            equipment_dao = SpecialEquipmentDAO(session)
            equipment = await equipment_dao.find_by_name(equipment_name)
            if not equipment:
                raise ValueError(f"–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ —Å –∏–º–µ–Ω–µ–º '{equipment_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")

            request_dao = RequestDAO(session)
            new_request = RequestCreate(
                tg_id=user.id,
                equipment_name=equipment_name,
                selected_date=selected_date,
                phone_number=phone_number,
                address=address,
                first_name=first_name,
                username=username
            )
            temp = await request_dao.add(new_request)

            rental_history_dao = EquipmentRentalHistoryDAO(session)
            rental_history = EquipmentRentalHistoryCreate(
                equipment_id=equipment.id,
                start_date=selected_date,
                rental_price_at_time=equipment.rental_price_per_day
            )
            await rental_history_dao.add(rental_history)

            await session.commit()

            await callback.message.answer("–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!")
        except Exception as e:
            await session.rollback()
            return

    await dialog_manager.switch_to(MainDialogStates.request_sent)
    await callback.answer()


def main_dialog() -> Dialog:
    confirm_select_equipment_window = create_confirmation_window(
        text="–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∞—Ä–µ–Ω–¥–æ–≤–∞—Ç—å —ç—Ç—É —Ç–µ—Ö–Ω–∏–∫—É?",
        intermediate_state=MainDialogStates.confirm_select_equipment,
        next_state=MainDialogStates.select_date,
        fields=["equipment_name", "rental_price"],
        formats=[
            "–¢–µ—Ö–Ω–∏–∫–∞: {equipment_name}",
            "–¶–µ–Ω–∞ –∞—Ä–µ–Ω–¥—ã: {rental_price} —Ä—É–±/—á–∞—Å",
        ]
    )

    confirm_date_window = create_confirmation_window(
        text="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –î–∞—Ç—É –∞—Ä–µ–Ω–¥—ã:",
        intermediate_state=MainDialogStates.confirm_date,
        next_state=MainDialogStates.enter_phone,
        fields=["equipment_name", "selected_date"],
        formats=["–¢–µ—Ö–Ω–∏–∫–∞: {equipment_name}", "–í—ã –≤—ã–±—Ä–∞–ª–∏ –¥–∞—Ç—É: {selected_date}"]
    )

    confirm_phone_window = create_confirmation_window(
        text="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:",
        intermediate_state=MainDialogStates.confirm_phone,
        next_state=MainDialogStates.enter_address,
        fields=["phone_number"],
        formats=["–í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {phone_number}"]
    )

    confirm_address_window = create_confirmation_window(
        text="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:",
        intermediate_state=MainDialogStates.confirm_address,
        next_state=MainDialogStates.create_request,
        fields=["address"],
        formats=["–í–∞—à –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏: {address}"]
    )

    view_equipment_details_window = Window(
        StaticMedia(
            url="https://iimg.su/i/7vTQV5",
            type=ContentType.PHOTO
        ),
        Format("–¢–µ—Ö–Ω–∏–∫–∞: {equipment_name}"),
        Format("–¶–µ–Ω–∞ –∞—Ä–µ–Ω–¥—ã: {rental_price} —Ä—É–±/—á–∞—Å"),
        Format("–û–ø–∏—Å–∞–Ω–∏–µ: {description}"),
        SwitchTo(text=Const(text='–ê—Ä–µ–Ω–¥–æ–≤–∞—Ç—å'), id='rent_equipment', state=MainDialogStates.confirm_select_equipment),
        Cancel(text=Const(text='–ù–∞–∑–∞–¥'), id='back_1_menu'),
        Button(text=Const(text='–ú–µ–Ω—é'), id='to_menu', on_click=go_menu),
        state=MainDialogStates.view_equipment_details,
        getter=async_get_equipment_details
    )

    enter_phone_window = Window(
        StaticMedia(
            url="https://iimg.su/i/7vTQV5",
            type=ContentType.PHOTO
        ),
        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—à–∏–±–∫–∏, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
        Format("{error_message}", when="error_message"),
        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–µ—Ö–Ω–∏–∫–∏ –∏ –¥–∞—Ç—ã, –µ—Å–ª–∏ –æ—à–∏–±–∫–∏ –Ω–µ—Ç
        Format("–¢–µ—Ö–Ω–∏–∫–∞: {equipment_name}", when=no_err_filter),
        Format("–î–∞—Ç–∞: {selected_date}", when=no_err_filter),
        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞, –µ—Å–ª–∏ –æ—à–∏–±–∫–∏ –Ω–µ—Ç
        Format(
            "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–∏–∂–µ\n–∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä'.",
            when=no_err_filter
        ),
        MessageInput(on_phone_number_input),
        Button(Const("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä"), id="share_contact", on_click=on_share_contact_click),
        Back(text=Const(text='–ù–∞–∑–∞–¥'), id='back'),
        state=MainDialogStates.enter_phone,
        getter=enter_phone_getter
    )

    enter_address_window = Window(
        StaticMedia(
            url="https://iimg.su/i/7vTQV5",
            type=ContentType.PHOTO
        ),
        Format("{error_message}", when="error_message"),
        Format("–¢–µ—Ö–Ω–∏–∫–∞: {equipment_name}", when=no_err_filter),
        Format("–î–∞—Ç–∞: {selected_date}", when=no_err_filter),
        Format("–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {phone_number}", when=no_err_filter),
        Format(
            "–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏ –Ω–∏–∂–µ.",
            when=no_err_filter
        ),
        MessageInput(on_address_input),
        Back(text=Const(text='–ù–∞–∑–∞–¥'), id='back'),
        state=MainDialogStates.enter_address,
        getter=enter_address_getter
    )

    create_request_window = Window(
        StaticMedia(
            url="https://iimg.su/i/7vTQV5",
            type=ContentType.PHOTO
        ),
        Format("–ó–∞—è–≤–∫–∞ –Ω–∞ –∞—Ä–µ–Ω–¥—É –ø–æ—á—Ç–∏ –≥–æ—Ç–æ–≤–∞..."),
        Format("‚úÖ –¢–µ—Ö–Ω–∏–∫–∞: {equipment_name}"),
        Format("‚úÖ –î–∞—Ç–∞: {selected_date}"),
        Format("‚úÖ –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {phone_number}"),
        Format("‚úÖ –ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏: {address}"),
        Format("‚úÖ –ò–º—è: {first_name}"),
        Format("‚úÖ tg: @{username}"),
        Button(Const('–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É –º–µ–Ω–µ–¥–∂–µ—Ä—É ‚úÖ'), id='send_request', on_click=on_send_request_click),
        Back(text=Const(text='–ù–∞–∑–∞–¥'), id='back'),
        Button(text=Const(text='–ú–µ–Ω—é'), id='to_menu', on_click=go_menu),
        state=MainDialogStates.create_request,
        getter=create_request_getter
    )

    request_sent_window = Window(
        StaticMedia(
            url="https://iimg.su/i/7vTQV5",
            type=ContentType.PHOTO
        ),
        Const("–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –º–µ–Ω–µ–¥–∂–µ—Ä—É! ‚úÖ"),
        Button(text=Const(text='–ú–µ–Ω—é'), id='to_menu', on_click=go_menu),
        state=MainDialogStates.request_sent,
    )

    return Dialog(
        Window(
            Const("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"),
            StaticMedia(
                url="https://iimg.su/i/7vTQV5",
                type=ContentType.PHOTO
            ),
            Const("–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å:"),
            Button(Const("–ê—Ä–µ–Ω–¥–∞"), id="rent", on_click=on_rent_click),
            Button(Const("–û—Ç–º–µ–Ω–∞ –ê—Ä–µ–Ω–¥—ã"), id="cancel_rent", on_click=on_cancel_rent_click),
            Button(Const("–°—á–µ—Ç–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É"), id="payment", on_click=on_payment_click),
            Button(Const("–ü–æ–¥—Ä–æ–±–Ω–µ–µ"), id="more", on_click=on_more_click),
            Button(Const("–í—ã–π—Ç–∏"), id="exit", on_click=on_exit_click),
            state=MainDialogStates.action_menu,
        ),
        Window(
            StaticMedia(
                url="https://iimg.su/i/7vTQV5",
                type=ContentType.PHOTO
            ),
            Const("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Å–ø–µ—Ü—Ç–µ—Ö–Ω–∏–∫–∏:"),
            paginated_categories(on_category_click),
            Back(text=Const(text='–ù–∞–∑–∞–¥'), id='back_1_menu'),
            Button(text=Const(text='–ú–µ–Ω—é'), id='to_menu', on_click=go_menu),
            state=MainDialogStates.select_category,
            getter=async_get_category_buttons
        ),
        Window(
            StaticMedia(
                url="https://iimg.su/i/7vTQV5",
                type=ContentType.PHOTO
            ),
            Const("–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é –º–æ–¥–µ–ª—å —Å–ø–µ—Ü—Ç–µ—Ö–Ω–∏–∫–∏:"),
            paginated_equipment(on_equipment_click),
            Const("–¢–µ—Ö–Ω–∏–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç", when=lambda data, widget, manager: not data.get("equipment")),
            Cancel(text=Const(text='–ù–∞–∑–∞–¥'), id='back_1_menu'),
            Button(text=Const(text='–ú–µ–Ω—é'), id='to_menu', on_click=go_menu),
            state=MainDialogStates.select_equipment,
            getter=async_get_equipment_buttons
        ),
        view_equipment_details_window,
        confirm_select_equipment_window,
        create_rental_calendar_window(MainDialogStates.select_date, MainDialogStates.confirm_date),
        confirm_date_window,
        enter_phone_window,
        confirm_phone_window,
        enter_address_window,
        confirm_address_window,
        create_request_window,
        request_sent_window,
    )


@connection()
async def on_agree_policy_click(callback: CallbackQuery, dialog_manager: DialogManager, session) -> None:
    user = callback.from_user
    logger_my = dialog_manager.middleware_data.get("logger") or logger
    logger_my.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} ({user.first_name}) —Å–æ–≥–ª–∞—Å–∏–ª—Å—è —Å –ø–æ–ª–∏—Ç–∏–∫–æ–π –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏")
    try:
        policy_dao = AgreePolicyDAO(session)
        existing_policy = await policy_dao.find_one_or_none(TelegramIDModel(telegram_id=user.id))
        if existing_policy:
            await callback.message.answer("–í—ã —É–∂–µ —Å–æ–≥–ª–∞—Å–∏–ª–∏—Å—å —Å –ø–æ–ª–∏—Ç–∏–∫–æ–π –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏.")
            await callback.answer()
            return
        await policy_dao.add(AgreePolicyModel(
            telegram_id=user.id,
            name=user.first_name,
        ))
        await callback.message.answer("–°–ø–∞—Å–∏–±–æ, –≤—ã —Å–æ–≥–ª–∞—Å–∏–ª–∏—Å—å —Å –ø–æ–ª–∏—Ç–∏–∫–æ–π –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏! "
                                      "–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /menu")
    except ValidationError as e:
        logger_my.error(f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ AgreePolicyModel –¥–ª—è tg_id={user.id}: {str(e)}", exc_info=True)
        await callback.message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å–æ–≥–ª–∞—Å–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    except Exception as e:
        logger_my.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å–æ–≥–ª–∞—Å–∏—è –¥–ª—è tg_id={user.id}: {str(e)}", exc_info=True)
        await callback.message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å–æ–≥–ª–∞—Å–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    await callback.answer()


class UserHandler(BaseHandler):
    def __init__(self, dp: Router):
        self.dialog = main_dialog()
        super().__init__(dp)
        self.dp.include_router(self.dialog)

    def register_handlers(self):
        self.dp.message(Command(commands=["start", "menu", "–º–µ–Ω—é", "–Ω–∞—á–∞—Ç—å", "main"]),
                        AgreePolicyFilter())(self.start_command)
        self.dp.message(~AgreePolicyFilter())(self.on_no_policy_agreement)
        self.dp.callback_query(lambda c: c.data == "agree_policy")(on_agree_policy_click)

    async def set_logger_middleware(self, handler, event, data: dict):
        try:
            data["logger"] = self.logger
            return await handler(event, data)
        except UnknownIntent as e:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º intent_id –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
            error_message = str(e)
            intent_id = error_message.split("intent id: ")[-1] if "intent id: " in error_message else "unknown"
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–æ–±—ã—Ç–∏—è
            user = get_user_from_update(event)
            user_id = user.id if user else "unknown"
            # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–ª–∞–¥–∫—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–∏–ø–∞ —Å–æ–±—ã—Ç–∏—è
            self.logger.debug(f"–¢–∏–ø —Å–æ–±—ã—Ç–∏—è: {type(event)}, —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ: {event}")
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å—Ç–∞—Ä–µ–≤—à–µ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
            self.logger.warning(
                f"–£—Å—Ç–∞—Ä–µ–≤—à–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è intent_id={intent_id}, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å={user_id}. –°–±—Ä–∞—Å—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥.")

            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–ª–∏ —É–¥–∞–ª–µ–Ω–∏—è
            message = None
            if isinstance(event, Update) and event.callback_query:
                self.logger.debug(f"–°–æ–±—ã—Ç–∏–µ —è–≤–ª—è–µ—Ç—Å—è Update —Å CallbackQuery, –∏–∑–≤–ª–µ–∫–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ")
                message = event.callback_query.message
            elif isinstance(event, CallbackQuery):
                self.logger.debug(f"–°–æ–±—ã—Ç–∏–µ —è–≤–ª—è–µ—Ç—Å—è CallbackQuery, –∏–∑–≤–ª–µ–∫–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ")
                message = event.message
            else:
                self.logger.debug(f"–°–æ–±—ã—Ç–∏–µ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è CallbackQuery, —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ dialog_manager –¥–ª—è —Å–±—Ä–æ—Å–∞ –¥–∏–∞–ª–æ–≥–∞
            dialog_manager = data.get("dialog_manager")
            self.logger.debug(f"dialog_manager: {dialog_manager}")

            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ –¥–æ—Å—Ç—É–ø–Ω–æ
            if message:
                self.logger.debug(f"–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–æ: message_id={message.message_id}, chat_id={message.chat.id}")
                try:
                    await message.delete()
                    self.logger.debug(
                        f"–£–¥–∞–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è intent_id={intent_id}, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å={user_id}, message_id={message.message_id}")
                except Exception as delete_error:
                    self.logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {str(delete_error)}")

            # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ —É–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if message:
                try:
                    if dialog_manager:
                        # –ï—Å–ª–∏ dialog_manager –¥–æ—Å—Ç—É–ø–µ–Ω, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥
                        try:
                            await dialog_manager.reset_stack()
                            dialog_manager.dialog_data.clear()
                            await dialog_manager.start(state=MainDialogStates.action_menu, mode=StartMode.RESET_STACK)
                            await message.edit_text("–î–∏–∞–ª–æ–≥ —É—Å—Ç–∞—Ä–µ–ª. –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–Ω–æ–≤–æ! üöÄ")
                            if isinstance(event, Update) and event.callback_query:
                                await event.callback_query.answer()
                            elif isinstance(event, CallbackQuery):
                                await event.answer()
                        except Exception as reset_error:
                            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –¥–∏–∞–ª–æ–≥–∞: {str(reset_error)}", exc_info=True)
                            await message.edit_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å –∫–æ–º–∞–Ω–¥—ã /start.")
                            if isinstance(event, Update) and event.callback_query:
                                await event.callback_query.answer()
                            elif isinstance(event, CallbackQuery):
                                await event.answer()
                    else:
                        # –ï—Å–ª–∏ dialog_manager –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ—Å—Ç–æ —É–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                        self.logger.warning("dialog_manager –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, —Å–±—Ä–æ—Å –¥–∏–∞–ª–æ–≥–∞ –Ω–µ–≤–æ–∑–º–æ–∂–µ–Ω")
                        await message.edit_text("–î–∏–∞–ª–æ–≥ —É—Å—Ç–∞—Ä–µ–ª. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å –∫–æ–º–∞–Ω–¥—ã /start.")
                        if isinstance(event, Update) and event.callback_query:
                            await event.callback_query.answer()
                        elif isinstance(event, CallbackQuery):
                            await event.answer()
                except Exception as edit_error:
                    self.logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {str(edit_error)}")
                    # –ï—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    try:
                        if dialog_manager:
                            await dialog_manager.reset_stack()
                            dialog_manager.dialog_data.clear()
                            await dialog_manager.start(state=MainDialogStates.action_menu, mode=StartMode.RESET_STACK)
                            await message.answer("–î–∏–∞–ª–æ–≥ —É—Å—Ç–∞—Ä–µ–ª. –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–Ω–æ–≤–æ! üöÄ")
                        else:
                            self.logger.warning("dialog_manager –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, —Å–±—Ä–æ—Å –¥–∏–∞–ª–æ–≥–∞ –Ω–µ–≤–æ–∑–º–æ–∂–µ–Ω")
                            await message.answer("–î–∏–∞–ª–æ–≥ —É—Å—Ç–∞—Ä–µ–ª. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å –∫–æ–º–∞–Ω–¥—ã /start.")
                        if isinstance(event, Update) and event.callback_query:
                            await event.callback_query.answer()
                        elif isinstance(event, CallbackQuery):
                            await event.answer()
                    except Exception as answer_error:
                        self.logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {str(answer_error)}")
            else:
                # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                self.logger.warning("–°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ")
                try:
                    if isinstance(event, Update) and event.callback_query:
                        if dialog_manager:
                            await dialog_manager.reset_stack()
                            dialog_manager.dialog_data.clear()
                            await dialog_manager.start(state=MainDialogStates.action_menu, mode=StartMode.RESET_STACK)
                            await event.callback_query.message.answer("–î–∏–∞–ª–æ–≥ —É—Å—Ç–∞—Ä–µ–ª. –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–Ω–æ–≤–æ! üöÄ")
                        else:
                            self.logger.warning("dialog_manager –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, —Å–±—Ä–æ—Å –¥–∏–∞–ª–æ–≥–∞ –Ω–µ–≤–æ–∑–º–æ–∂–µ–Ω")
                            await event.callback_query.message.answer(
                                "–î–∏–∞–ª–æ–≥ —É—Å—Ç–∞—Ä–µ–ª. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å –∫–æ–º–∞–Ω–¥—ã /start.")
                        await event.callback_query.answer()
                    elif isinstance(event, CallbackQuery):
                        if dialog_manager:
                            await dialog_manager.reset_stack()
                            dialog_manager.dialog_data.clear()
                            await dialog_manager.start(state=MainDialogStates.action_menu, mode=StartMode.RESET_STACK)
                            await event.message.answer("–î–∏–∞–ª–æ–≥ —É—Å—Ç–∞—Ä–µ–ª. –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–Ω–æ–≤–æ! üöÄ")
                        else:
                            self.logger.warning("dialog_manager –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, —Å–±—Ä–æ—Å –¥–∏–∞–ª–æ–≥–∞ –Ω–µ–≤–æ–∑–º–æ–∂–µ–Ω")
                            await event.message.answer("–î–∏–∞–ª–æ–≥ —É—Å—Ç–∞—Ä–µ–ª. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å –∫–æ–º–∞–Ω–¥—ã /start.")
                        await event.answer()
                    elif isinstance(event, Update) and event.message:
                        await event.message.answer("–î–∏–∞–ª–æ–≥ —É—Å—Ç–∞—Ä–µ–ª. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å –∫–æ–º–∞–Ω–¥—ã /start.")
                    elif isinstance(event, Message):
                        await event.answer("–î–∏–∞–ª–æ–≥ —É—Å—Ç–∞—Ä–µ–ª. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å –∫–æ–º–∞–Ω–¥—ã /start.")
                except Exception as answer_error:
                    self.logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {str(answer_error)}")

            return None  # –ü—Ä–µ—Ä—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É, —Ç–∞–∫ –∫–∞–∫ –∫–æ–Ω—Ç–µ–∫—Å—Ç —É—Å—Ç–∞—Ä–µ–ª
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –≤ middleware: {str(e)}", exc_info=True)
            raise

    async def start_command(self, message: Message, dialog_manager: DialogManager) -> None:
        user = message.from_user
        self.logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} ({user.first_name}) –æ—Ç–ø—Ä–∞–≤–∏–ª –∫–æ–º–∞–Ω–¥—É /start –∏–ª–∏ /menu")
        dialog_manager.middleware_data["logger"] = self.logger

        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–µ–Ω—é, –µ—Å–ª–∏ –æ–Ω–æ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        fsm_context = dialog_manager.middleware_data.get("fsm_context")
        if fsm_context:
            user_id_str = str(user.id)
            chat_id = message.chat.id
            storage_key = f"last_menu_message_id:{user_id_str}:{chat_id}"
            storage_data = await fsm_context.get_data()
            last_menu_message_id = storage_data.get(storage_key)
            if last_menu_message_id:
                try:
                    await message.bot.delete_message(chat_id=chat_id, message_id=last_menu_message_id)
                    self.logger.debug(f"–£–¥–∞–ª–µ–Ω–æ —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–µ–Ω—é: message_id={last_menu_message_id}")
                except Exception as delete_error:
                    self.logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–µ–Ω—é: {str(delete_error)}")
                # –û—á–∏—â–∞–µ–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–π message_id
                await fsm_context.set_data({storage_key: None})
        else:
            self.logger.warning("FSM-—Ö—Ä–∞–Ω–∏–ª–∏—â–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ, –Ω–µ –º–æ–∂–µ–º —É–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–µ–Ω—é")

        # –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤—ã–π –¥–∏–∞–ª–æ–≥
        await dialog_manager.start(state=MainDialogStates.action_menu, mode=StartMode.RESET_STACK)

    @connection()
    async def on_no_policy_agreement(self, message: Message, session) -> None:
        user = message.from_user
        self.logger.info(
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} ({user.first_name}) –æ—Ç–ø—Ä–∞–≤–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ —Å–æ–≥–ª–∞—Å–∏—è —Å –ø–æ–ª–∏—Ç–∏–∫–æ–π")
        policy_url = await get_active_policy_url(session)
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–°–æ–≥–ª–∞—Å–µ–Ω ‚úÖ", callback_data="agree_policy")],
            [InlineKeyboardButton(
                text="–ü–æ–ª–∏—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ üìÑ",
                web_app=WebAppInfo(url=policy_url)
            )]
        ])
        await message.answer(
            text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å –∏ —Å–æ–≥–ª–∞—Å–∏—Ç–µ—Å—å —Å –ø–æ–ª–∏—Ç–∏–∫–æ–π –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏. "
                 "–¢–æ–≥–¥–∞ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –±–æ—Ç–∞ —Å—Ç–∞–Ω–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω.",
            reply_markup=keyboard
        )
